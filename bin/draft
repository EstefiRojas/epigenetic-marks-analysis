
# Function to get coordinates for exons required to generate the lncRNA dataset and negative control 
# It does not work yet: error bash: relative_start_2=0,1769: command not found

get_exon_coords() {             # Gets exon starting and end coordinates for lncRNA from RNAcentral ncRNA coordinates ($meta)
    
    local exon=$1

    relative_start_"$exon"=$(echo "$meta" | awk -F'\t' '{print $12}' | awk -v exon="$exon" -F',' '{print $exon}')   # Position relative to Start (bed format) for exons
    start_"$exon"=$(( $seq_start + $relative_start_"$exon" + 1 ))                                       # +1 to account for the first relative start pos being 0
    end_"$exon"=$(( $start_"$exon" + $len_"$exon" ))

 }  

exons=("1" "2" "3" "$exon_count") 
for exon in "${exons[@]}"; do
    get_exon_coords "$exon"
done




######## Folder with local databases and version specific executables
#additional_folder=$2  # is the best way to organize the project? 
#if [ ! -d $additional_folder/ ]
#then
#    echo "Folder with required local databases does not exist."
    #exit 1
#else
#    :
#fi


	mkdir -p aliout
        var=$(($var+1))
        rm -rf *.sorted.cov
        mv *.cov rscapedata &> /dev/null
        rm -rf overBed
        rm -rf blank.txt
        #rm -rf *.pdf
        #rm -rf *ss.ps
        #rm -rf *.svg
        #rm -rf *.surv
        #rm -rf *.sto
	mv RNA*.ps  aliout/
	mv RNA*.stk aliout/
	mv RNA*svg  aliout/
	mv RNA*sto  aliout/
	mv RNA*pdf  aliout/
	mv RNA*surv  aliout/
	mv *rnaalifold aliout/
        rm -rf *.power
        rm -rf rnacode_output


zip -r maf maf &> /dev/null
rm -rf maf/





#### Reformat initial dataset
awk -F',' 'NR > 1 {print $3"\t"$4"\t"$5}' $initial_data > data/tab-coordinates
awk -F',' 'NR > 1 {print $3,$4,$5}' $initial_data > data/coordinates  # for mafFetch
awk -F',' 'NR > 1 {print $3"\t"$4"\t"$5}' "$initial_data" | sort -k1,1 -k2,2n > data/sorted-coordinates.bed # for bedtools
awk -F',' 'NR > 1 {print $3"\t"$4"\t"$5"\t"$1}' "$initial_data" > data/hg38-coordinates.bed # for VFC 1kGP files




######## Reformats chromosome coordinates for mafFetch
rm -rf data/coordinates
awk -F',' 'NR > 1 {print $3,$4,$5}' $initial_data > data/coordinates
mkdir data/rscape
mkdir data/maf

var="$first_rna_id"
#rm -rf *.stk

while IFS=$'\t' read -r line
do
    ######## Obtain MSA files from multiz100way, unless they've already been downloaded
    rna_id='RNA'$var
    if [ -f data/maf/$rna_id.maf ]; then
        
        cp data/maf/$rna_id.maf data/maf/mafOut
    
    else            
        #until
        echo "$line" > data/maf/mafFetch-input 
        #echo "$mafFetch_exe hg38 multiz100way data/maf/mafFetch-input mafOut 2>>errors.log ;" >> errors.log
	    $mafFetch_exe hg38 multiz100way data/maf/mafFetch-input data/maf/mafOut 2>>errors.log ;
	    #do sleep 4 ; done
        cp data/maf/mafOut data/maf/$rna_id.maf 
    fi



# ZOOOMIA
# Obtain MSA files from 241-way cactus alignment

bigBedToBed_exe='bin/bigBedToBed'       # to extract MSA of regions from UCSC server  
cactus_align_url='http://hgdownload.soe.ucsc.edu/goldenPath/hg38/cactus241way/cactus241way.bigMaf'
input_file='data/initial_data_sample'


{
    read 
    while IFS=, read -r rna_id _ chr start end _; do

                                                    # Obtain MSA files from 241-way cactus alignment
        
        $bigBedToBed_exe $cactus_align_url \
            stdout -chrom=$chr -start=$start -end=$end | cut -f 4 | tr ';' \        # format bed output to maf
        '\n' > data/zoonomia-maf/$rna_id.maf

        maf_file=data/zoonomia-maf/$rna_id.maf

    if [ ! -z $maf_file ]; then
        
        ######## Run RNAcode
        RNAcode_output=data/rnacode-output
	    #echo "$RNAcode_exe $file -o $RNAcode_output 2>>errors.log &> /dev/null" >>errors.log
	    $RNAcode_exe $maf_file -o "$RNAcode_output" 2>>errors.log &> /dev/null



### BLASTN & NHMMER --> after comparing blastn, mmseqs and nhmmer (test>copy-number-comparison)
blastn_exe=blastn
human_genome_blastn=data/raw/blastn/human_genome

blastn_output="${output_directory}/$(basename "${initial_data%.*}" | sed 's/dataset//')blastn-output.csv" 
$blastn_exe -query $initial_fasta -db $human_genome_blastn -evalue 0.01 -out $blastn_output -outfmt "10 qaccver saccver pident" >/dev/null 2>>errors.log

nhmmer_exe=nhmmer
human_genome_nhmmer=data/raw/GRCh38_p14_genomic.fna

nhmmer_input="${output_directory}/$(basename "${initial_data%.*}" | sed 's/dataset//')nhmmer-input.fasta"
nhmmer_output="${output_directory}/$(basename "${initial_data%.*}" | sed 's/dataset//')nhmmer-output"

# withing a while loop
echo "$( grep -w -A 1 ">RNA$var" $initial_fasta )" > $nhmmer_input

    $nhmmer_exe --tblout $nhmmer_output -E 0.01 --noali $nhmmer_input $human_genome_nhmmer > /dev/null 2>&1 # -E <x> : report sequences <= this E-value threshold in output; don't output alignments
    nhmmer_hits=$( grep -v "#" $nhmmer_output | wc -l )

    total_blastn=$( grep -w "RNA$var" $blastn_output | wc -l)  
    if [ -z "$total_blastn" ]; then total_blastn='NA'; fi 
    if [ -z "$nhmmer_hits" ]; then nhmmer_hits='NA'; fi

## Telomere-to-telomere assembly with nhmmer

#var=$first_rna_id
#last_seq=$last_rna_id

#while [ $var -le $last_seq ]
#do
#    echo "$( grep -w -A 1 ">RNA$var" $initial_fasta )" > data/nhmmer-input.fasta
#    $nhmmer_exe --tblout data/nhmmer-output -E 0.01 --noali data/nhmmer-input.fasta $T2T_genome > /dev/null 2>&1 # -E <x> : report sequences <= this E-value threshold in output; don't output alignments
#    nhmmer_hits_T2T=$( grep -v "#" data/nhmmer-output | wc -l )
    
#    if [ -z "$nhmmer_hits_T2T" ]; then nhmmer_hits_T2T='NA'; fi

#    echo "$nhmmer_hits_T2T" >> data/T2T-copy-number-$name.csv

#    (( var++ ))

#done


#minimap2 data/raw/GRCh38_p14_genomic.fna data/nhmmer-input.fasta >> data/minimap-output


######## IntaRNA

#if [ -z "$lib_directory" ]                                                                               # If Boost library didn't have to specified, run as normal.
    #then
    $IntaRNA_exe -t "$interaction_database" -m "$intaRNA_input" > "$intaRNA_output" 2>>errors.log           
    #else
    #    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$lib_directory $IntaRNA_exe -m $intaRNA_input -t $interaction_database > data/intaRNA-results 2>>errors.log
    #fi 
    
    ######## Grab all recorded interactions
  
    grep "energy" "$intaRNA_output" | cut -d ':' -f 2 | tr -d "kcal/mol" | tr -d ' ' > "$kcal_mol"        
                                                                                                      
    count=$(wc -l < "$kcal_mol" )                                                                        # Number of interaction energies recorded
    min=$( head -n 1 "$kcal_mol")                                                                        # Min interaction energy
    sum=0                                                                                                # Sum of all energies calculated, prior to averaging

    while read -r number; do 
        
        if (( $(echo "$number < $min" | bc -l) )); then min="$number"; fi                                   # If the interaction energy is smaller than the recorded min, update the min
        sum=$(echo "scale=3; $sum+$number" | bc)
    
    done < "$kcal_mol"

    ######## If no interactions were recorded, set minimum and average as NA 
    if [[ "$count" == 0 ]]; then
        ave='NA'
        min='NA'
    else
        ave=$(echo "scale=3; $sum/$count" | bc )
    fi

    #### RNAup

    # RNA input: sequence following by the curated sequences
    cat "$intaRNA_input" "$interaction_database" > "$RNAup_input"




# To extract negative coords from the one file 
neg_file=data/lncrna-coords-negative-control.csv
neg_file=data/protein-coords-negative-control.csv
neg_file=data/short-ncrna-coords-negative-control.csv

file=data/functional-lncrna-exon1-dataset.csv
file=data/protein-exon2-dataset.csv
file=data/functional-short-ncrna-dataset.csv

file_two=data/coords-for-negative-control.csv

declare -a "neg_id=()"
mapfile -t neg_id < <(cut -f 3,4 -d ',' "$file") 

mapfile -t neg_id < <(cut -f 1,2 -d ',' "$file") 

test_file=data/test-file
test_file_two=data/test-file-two

awk -F ',' '{print $5 - $4}' $file > $test_file_two


mapfile -t neg_id < <(cut -f 1,4 -d ',' "$file") 


for item in "${neg_id[@]}"; do
    grep -m 1 "$item" "$file_two" >> $neg_file
done

paste -d ',' $test_file $test_file_two > data/final-test
configfile: "config.yaml"
functional_rna=["protein-exon2", "protein-exon3", "functional-lncrna-exon2", "functional-lncrna-exon3", "functional-short-ncrna"]
negative_rna=["protein", "lncrna", "short-ncrna"]

##################################################
# Extract 1000 sequences for each type of RNA: protein coding exon 2 & 3, lncrna exon 1 & 2, short-ncrna; 
# and corresponding coordinates for negative control 
# Sequences are selected randomly filtering out:    
#       mitocondrial or Ychr RNA 
#       length XXXX 
#       number of exons: at least 2 for lncrna and protein-coding-rna 
#         
##################################################
rule all_sequences_processing:
    input:
        expand("data/{sample}-dataset.csv", sample=functional_rna)
        expand("data/{sample}-coords-negative-control.csv", sample=negative_rna)

rule sequences_processing:
    input: 
        rnacentral_coords=config["rnacentral_coords"],
        rnacentral_lncrna_seq=config["rnacentral_lncrna_seq"], 
        rnacentral_short_ncrna=config["rnacentral_short_ncrna"],
        rnacentral_pre_mirna=config["rnacentral_pre_mirna"],
        genome_annotations=config["genome_annotations"],
        genome_seq=config["genome_seq"],
        protein_coding_refseq=config["protein_coding_refseq"]

    output:
        "data/{sample}-dataset.csv",
        "data/{sample}-coords-negative-control.csv"
    
    shell:
        "scripts/sequences-processing.sh {input} > {output}"

##################################################
# Generate Negative control: 

#       - 2 separate rules to run the scripts on the datasets since short-ncrna outputs one file
#       while the protein-coding and lncrnas output two (due number of exons)

#       - Starting with the coordinates for negative control obtain with rule "sequences_processing",
#       10 sequences are extract for each functional sequence 1000, 10000, 100000, 1000000 and 5000000 
#       nucleotides away upstream and downstream. Sequences with more than 5% ambiguos nucleotides and 
#       overlapping known genes are filter out 

##################################################

rule all_negative_control:
    input:
        expand("data/{sample}-first-negative-control-dataset.csv", sample=["protein", "lncrna"]),
        expand("data/{sample}-last-negative-control-dataset.csv", sample=["protein", "lncrna"]),
        expand("data/{sample}-negative-control-dataset.csv", sample=["short-ncrna"])

rule negative_control_multiple_exons:
    input:
        initial_data="data/{sample}-coords-negative-control.csv",
        genome_csv=config["genome_csv"],
        gencode_bed=config["gencode_bed"],
        uniprot_bed=config["uniprot_bed"]
        
    output:
        "data/{sample}-first-negative-control-dataset.csv",
        "data/{sample}-last-negative-control-dataset.csv"

    shell:
        "scripts/negative-control.sh {input} > {output}"

        

rule negative_control_single_exon:
    input:
        initial_data="data/short-ncrna-coords-negative-control.csv",
        genome_csv=config["genome_csv"],
        gencode_bed=config["gencode_bed"],
        uniprot_bed=config["uniprot_bed"]
    
    output:
        "data/short-ncrna-negative-control-dataset.csv"
       
    shell:
        "scripts/negative-control.sh {input} > {output}"


##################################################
# ITS NOT WORKING 
rule rename_negative_control_files:
    input:
        "data/protein-last-negative-control-dataset.csv",
        "data/protein-first-negative-control-dataset.csv",
        "data/lncrna-first-negative-control-dataset.csv",
        "data/lncrna-last-negative-control-dataset.csv" 
    output:
        "data/protein-exon3-negative-control-dataset.csv",
        "data/protein-exon2-negative-control-dataset.csv",
        "data/lncrna-exon1-negative-control-dataset.csv",
        "data/lncrna-exon2-negative-control-dataset.csv"
    shell:
        "mv {input} {output}"


##################################################

# Generate functional FASTA file from CSV file
names=["protein-exon2", "protein-exon3", "functional-lncrna-exon2", "functional-lncrna-exon3", "functional-short-ncrna"]

rule all:
    input:
        expand("data/{sample}-seq.fa", sample=["protein-exon2", "protein-exon3", "functional-lncrna-exon1", "functional-lncrna-exon2", "functional-short-ncrna", "protein-negative-control", "lncrna-negative-control", "short-ncrna-negative-control"])

rule csv_to_fasta:
    input:
        csv="data/{sample}-dataset.csv"
    output:
        fasta="data/{sample}-seq.fa"
    shell:                                      
        """
        sed '1d' {input.csv} | while IFS=',' read -r id _ _ _ _ seq; do 

            echo -e ">$id\n$seq" >> {output.fasta}
            
        done 
        """


##################################################
